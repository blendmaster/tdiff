// Generated by LiveScript 1.2.0
var input1, error1, output1, input2, error2, output2, textmode, hovered, calcDiff, parse, parse1, parse2;
input1 = $('input1');
error1 = $('error1');
output1 = $('output1');
input2 = $('input2');
error2 = $('error2');
output2 = $('output2');
textmode = $('textmode');
hovered = [];
calcDiff = function(){
  var ast1, ast2, e, f1, f2, d, i$, ref$, len$, node, postorder, that;
  try {
    ast1 = esprima.parse(input1.value);
    ast2 = esprima.parse(input2.value);
  } catch (e$) {
    e = e$;
    if (textmode.checked) {
      try {
        ast1 = textModeParse(input1.value);
        ast2 = textModeParse(input2.value);
      } catch (e$) {
        e = e$;
        return;
      }
    } else {
      return;
    }
  }
  console.time('ast1');
  f1 = new Tree(ast1);
  console.timeEnd('ast1');
  console.time('ast2');
  f2 = new Tree(ast2);
  console.timeEnd('ast2');
  console.time('dist');
  d = new EditDistance(f1, f2, COST);
  console.timeEnd('dist');
  for (i$ = 0, len$ = (ref$ = $$('#output1 .syntax')).length; i$ < len$; ++i$) {
    node = ref$[i$];
    postorder = node.getAttribute('data-postorder');
    if ((that = d.amap[postorder]) != null) {
      (fn$.call(this, that, postorder, node));
    } else {
      node.classList.add('deleted');
    }
  }
  for (i$ = 0, len$ = (ref$ = $$('#output2 .syntax')).length; i$ < len$; ++i$) {
    node = ref$[i$];
    postorder = node.getAttribute('data-postorder');
    if ((that = d.bmap[postorder]) != null) {
      (fn1$.call(this, that, postorder, node));
    } else {
      node.classList.add('added');
    }
  }
  function fn$(mapped, postorder, node){
    node.classList.add('mapped');
    node.addEventListener('mouseenter', function(){
      var i$, x$, ref$, len$;
      for (i$ = 0, len$ = (ref$ = $$(".hover")).length; i$ < len$; ++i$) {
        x$ = ref$[i$];
        x$.classList.remove('hover');
      }
      this.classList.add('hover');
      hovered.push([mapped, postorder]);
      $q("#output2 [data-postorder=\"" + mapped + "\"]").classList.add('hover');
    }, false);
    node.addEventListener('mouseleave', function(){
      var i$, x$, ref$, len$, that;
      for (i$ = 0, len$ = (ref$ = $$(".hover")).length; i$ < len$; ++i$) {
        x$ = ref$[i$];
        x$.classList.remove('hover');
      }
      hovered.pop();
      if ((that = hovered[hovered.length - 1]) != null) {
        $q("#output2 [data-postorder=\"" + that[0] + "\"]").classList.add('hover');
        $q("#output1 [data-postorder=\"" + that[1] + "\"]").classList.add('hover');
      }
    }, false);
  }
  function fn1$(mapped, postorder, node){
    node.classList.add('mapped');
    node.addEventListener('mouseenter', function(){
      var i$, x$, ref$, len$;
      for (i$ = 0, len$ = (ref$ = $$(".hover")).length; i$ < len$; ++i$) {
        x$ = ref$[i$];
        x$.classList.remove('hover');
      }
      this.classList.add('hover');
      hovered.push([mapped, postorder]);
      $q("#output1 [data-postorder=\"" + mapped + "\"]").classList.add('hover');
    }, false);
    node.addEventListener('mouseleave', function(){
      var i$, x$, ref$, len$, that;
      for (i$ = 0, len$ = (ref$ = $$(".hover")).length; i$ < len$; ++i$) {
        x$ = ref$[i$];
        x$.classList.remove('hover');
      }
      hovered.pop();
      if ((that = hovered[hovered.length - 1]) != null) {
        $q("#output1 [data-postorder=\"" + that[0] + "\"]").classList.add('hover');
        $q("#output2 [data-postorder=\"" + that[1] + "\"]").classList.add('hover');
      }
    }, false);
  }
};
parse = function(input, error, output){
  return function(){
    var ast, e, that, normalizedCode, normalizedAst;
    try {
      ast = esprima.parse(input.value, {
        range: true
      });
    } catch (e$) {
      e = e$;
      if (textmode.checked) {
        try {
          ast = textModeParse(input.value, {
            range: true
          });
        } catch (e$) {
          e = e$;
          return;
        }
      } else {
        error.textContent = e;
        input.classList.add('error');
        return;
      }
    }
    postorder(ast);
    while ((that = output.firstChild) != null) {
      output.removeChild(that);
    }
    normalizedCode = escodegen.generate(ast, {
      format: {
        indent: {
          style: ''
        },
        semicolons: false
      }
    });
    normalizedAst = esprima.parse(normalizedCode, {
      range: true
    });
    postorder(normalizedAst);
    output.appendChild(genHtml(normalizedCode, normalizedAst));
    input.classList.remove('error');
    error.textContent = '';
  };
};
parse1 = parse(input1, error1, output1);
parse2 = parse(input2, error2, output2);
$('input1').addEventListener('input', parse1);
$('input2').addEventListener('input', parse2);
parse1();
parse2();
$('calc').addEventListener('click', calcDiff);
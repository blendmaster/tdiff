// Generated by LiveScript 1.2.0
var ref$, left, right, pwd;
ref$ = new URI(window.location).query(true), left = ref$.left, right = ref$.right, pwd = ref$.pwd;
if (left[0] !== '/') {
  left = pwd + left;
}
if (right[0] !== '/') {
  right = pwd + right;
}
d3.xhr("/file" + left, function(err, arg$){
  var left;
  left = arg$.response;
  if (err) {
    throw err;
  }
  d3.xhr("/file" + right, function(err, arg$){
    var right, output1, output2, hovered, calcDiff, parse;
    right = arg$.response;
    if (err) {
      throw err;
    }
    output1 = $('output1');
    output2 = $('output2');
    hovered = [];
    calcDiff = function(){
      var ast1, ast2, e, f1, f2, d, i$, ref$, len$, node, postorder, that;
      try {
        ast1 = esprima.parse(left);
        ast2 = esprima.parse(right);
      } catch (e$) {
        e = e$;
        ast1 = textModeParse(left);
        ast2 = textModeParse(right);
      }
      console.time('ast1');
      f1 = new Tree(ast1);
      console.timeEnd('ast1');
      console.time('ast2');
      f2 = new Tree(ast2);
      console.timeEnd('ast2');
      console.time('dist');
      d = new EditDistance(f1, f2, COST);
      console.timeEnd('dist');
      for (i$ = 0, len$ = (ref$ = $$('#output1 .syntax')).length; i$ < len$; ++i$) {
        node = ref$[i$];
        postorder = node.getAttribute('data-postorder');
        if ((that = d.amap[postorder]) != null) {
          (fn$.call(this, that, postorder, node));
        } else {
          node.classList.add('deleted');
        }
      }
      for (i$ = 0, len$ = (ref$ = $$('#output2 .syntax')).length; i$ < len$; ++i$) {
        node = ref$[i$];
        postorder = node.getAttribute('data-postorder');
        if ((that = d.bmap[postorder]) != null) {
          (fn1$.call(this, that, postorder, node));
        } else {
          node.classList.add('added');
        }
      }
      function fn$(mapped, postorder, node){
        node.classList.add('mapped');
        node.addEventListener('mouseenter', function(){
          var i$, x$, ref$, len$;
          for (i$ = 0, len$ = (ref$ = $$(".hover")).length; i$ < len$; ++i$) {
            x$ = ref$[i$];
            x$.classList.remove('hover');
          }
          this.classList.add('hover');
          hovered.push([mapped, postorder]);
          $q("#output2 [data-postorder=\"" + mapped + "\"]").classList.add('hover');
        }, false);
        node.addEventListener('mouseleave', function(){
          var i$, x$, ref$, len$, that;
          for (i$ = 0, len$ = (ref$ = $$(".hover")).length; i$ < len$; ++i$) {
            x$ = ref$[i$];
            x$.classList.remove('hover');
          }
          hovered.pop();
          if ((that = hovered[hovered.length - 1]) != null) {
            $q("#output2 [data-postorder=\"" + that[0] + "\"]").classList.add('hover');
            $q("#output1 [data-postorder=\"" + that[1] + "\"]").classList.add('hover');
          }
        }, false);
      }
      function fn1$(mapped, postorder, node){
        node.classList.add('mapped');
        node.addEventListener('mouseenter', function(){
          var i$, x$, ref$, len$;
          for (i$ = 0, len$ = (ref$ = $$(".hover")).length; i$ < len$; ++i$) {
            x$ = ref$[i$];
            x$.classList.remove('hover');
          }
          this.classList.add('hover');
          hovered.push([mapped, postorder]);
          $q("#output1 [data-postorder=\"" + mapped + "\"]").classList.add('hover');
        }, false);
        node.addEventListener('mouseleave', function(){
          var i$, x$, ref$, len$, that;
          for (i$ = 0, len$ = (ref$ = $$(".hover")).length; i$ < len$; ++i$) {
            x$ = ref$[i$];
            x$.classList.remove('hover');
          }
          hovered.pop();
          if ((that = hovered[hovered.length - 1]) != null) {
            $q("#output1 [data-postorder=\"" + that[0] + "\"]").classList.add('hover');
            $q("#output2 [data-postorder=\"" + that[1] + "\"]").classList.add('hover');
          }
        }, false);
      }
    };
    parse = function(input, output){
      var ast, e, that, normalizedCode, normalizedAst;
      try {
        ast = esprima.parse(input, {
          range: true
        });
      } catch (e$) {
        e = e$;
        ast = textModeParse(input, {
          range: true
        });
      }
      postorder(ast);
      while ((that = output.firstChild) != null) {
        output.removeChild(that);
      }
      normalizedCode = escodegen.generate(ast, {
        format: {
          indent: {
            style: ''
          },
          semicolons: false
        }
      });
      normalizedAst = esprima.parse(normalizedCode, {
        range: true
      });
      postorder(normalizedAst);
      return output.appendChild(genHtml(normalizedCode, normalizedAst));
    };
    parse(left, $('output1'));
    parse(right, $('output2'));
    calcDiff();
  });
});